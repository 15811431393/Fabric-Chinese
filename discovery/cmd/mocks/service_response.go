
//此源码被清华学神尹成大魔王专业翻译分析并修改
//尹成QQ77025077
//尹成微信18510341407
//尹成所在QQ群721929980
//尹成邮箱 yinc13@mails.tsinghua.edu.cn
//尹成毕业于清华大学,微软区块链领域全球最有价值专家
//https://mvp.microsoft.com/zh-cn/PublicProfile/4033620
//Code generated by mockery v1.0.0. 不要编辑。
package mocks

import discovery "github.com/hyperledger/fabric/discovery/client"
import mock "github.com/stretchr/testify/mock"
import protosdiscovery "github.com/hyperledger/fabric/protos/discovery"

//ServiceResponse是为ServiceResponse类型自动生成的模拟类型
type ServiceResponse struct {
	mock.Mock
}

//forchannel提供了一个具有给定字段的模拟函数：a0
func (_m *ServiceResponse) ForChannel(_a0 string) discovery.ChannelResponse {
	ret := _m.Called(_a0)

	var r0 discovery.ChannelResponse
	if rf, ok := ret.Get(0).(func(string) discovery.ChannelResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(discovery.ChannelResponse)
		}
	}

	return r0
}

//ForLocal为给定字段提供模拟函数：
func (_m *ServiceResponse) ForLocal() discovery.LocalResponse {
	ret := _m.Called()

	var r0 discovery.LocalResponse
	if rf, ok := ret.Get(0).(func() discovery.LocalResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(discovery.LocalResponse)
		}
	}

	return r0
}

//raw提供了一个具有给定字段的模拟函数：
func (_m *ServiceResponse) Raw() *protosdiscovery.Response {
	ret := _m.Called()

	var r0 *protosdiscovery.Response
	if rf, ok := ret.Get(0).(func() *protosdiscovery.Response); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protosdiscovery.Response)
		}
	}

	return r0
}
